version: 0.1.{build}
image: Visual Studio 2015
install:
- ps: $env:SQL_SERVER_BACKUP_DIRECTORY=(Get-ItemProperty "HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL13.SQL2016\MSSqlServer").BackupDirectory
- ps: Import-PfxCertificate -FilePath "$($env:SQL_SERVER_COLUMN_CERTIFICATE).pfx" -Password (ConvertTo-SecureString -String "1234" -Force -AsPlainText)
assembly_info:
  patch: true
  file: 'GlobalAssemblyInfo.cs'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'
environment:
  MSBUILD_LOG_VERSION: 2.0.94
  MSBUILD_LOG_FILE: msbuild.binlog
  NUGET_VERBOSITY: quiet
  SQL_SERVER_INSTANCE: (local)\SQL2016
  SQL_SERVER_USER: AlwaysEncryptedOwner
  SQL_SERVER_PASSWORD: 7aO!z@xUu!4r6EvD#D&l$sz6&h^rhxL6fzAHMpnOga@LO*WdsEdpfh4^Egtl
  SQL_SERVER_DATABASE: AlwaysEncryptedSample
  SQL_SERVER_BACKUP_FILE: $(SQL_SERVER_DATABASE).bak
  SQL_SERVER_DACPAC: $(SQL_SERVER_DATABASE).dacpac
  SQL_SERVER_GENERATED_SCHEMA: $(SQL_SERVER_DATABASE).sql
  SQL_SERVER_CONNECTION_STRING: "Data Source=$(SQL_SERVER_INSTANCE);Initial Catalog=$(SQL_SERVER_DATABASE);Integrated Security=SSPI;Application Name=AppVeyor CI Process;Column Encryption Setting=Enabled"
  SQL_SERVER_VERIFICATION_LOG: $(SQL_SERVER_DATABASE).verification.log
  SQL_SERVER_COLUMN_CERTIFICATE: AlwaysEncryptedSampleCMK
  matrix:
  - {}
services: 
- mssql2016
nuget:
  # This might be causing a hang.
  # account_feed: true
  project_feed: true
cache:
- packages -> **\packages.config
before_build:
- cmd: sqlcmd -S "%SQL_SERVER_INSTANCE%" -i .\appveyor\init.sql
- ps: Install-Module sqlsgit erver -Scope CurrentUser -AllowClobber
- ps: Write-Host $env:SQL_SERVER_CONNECTION_STRING
- ps: Get-Module -ListAvailable sqlserver | select -ExpandProperty ExportedCommands
- ps: .\New-EncryptionKeys.ps1 -ConnectionString $env:SQL_SERVER_CONNECTION_STRING -ExportCertificate
- ps: .\Invoke-EncryptColumns.ps1 -ConnectionString $env:SQL_SERVER_CONNECTION_STRING
- cmd: nuget restore -Verbosity %NUGET_VERBOSITY%
- cmd: nuget install MSBuild.StructuredLogger -Version %MSBUILD_LOG_VERSION%  -SolutionDirectory . -Verbosity %NUGET_VERBOSITY%
build:
  publish_nuget: true
  publish_nuget_symbols: true
  include_nuget_references: true
  publish_wap: true
  parallel: true
  verbosity: minimal
after_build:
  - ps: .\appveyor\Start-EntityFrameworkMigration.ps1
  - cmd: sqlcmd -S "%SQL_SERVER_INSTANCE%" -d %SQL_SERVER_DATABASE% -W -i .\appveyor\schema_verification.sql -o %SQL_SERVER_VERIFICATION_LOG%
  - cmd: sqlcmd -S "%SQL_SERVER_INSTANCE%" -Q "BACKUP DATABASE [$(SQL_SERVER_DATABASE)] TO DISK='$(SQL_SERVER_BACKUP_FILE)' WITH FORMAT, COMPRESSION, STATS=10;"
  - ps: Move-Item -Path (Join-Path $env:SQL_SERVER_BACKUP_DIRECTORY "$($env:SQL_SERVER_BACKUP_FILE)") -Destination $env:APPVEYOR_BUILD_FOLDER
  - cmd: sqlpackage.exe /Action:Extract /TargetFile:"%SQL_SERVER_DACPAC%" /SourceServerName:"%SQL_SERVER_INSTANCE%" /SourceDatabaseName:%SQL_SERVER_DATABASE%
  - cmd: git status
artifacts:
  - path: $(SQL_SERVER_BACKUP_FILE)
    name: Database backup
    type: file
  - path: $(SQL_SERVER_DACPAC)
    name: DACPAC
    type: file
  - path: $(SQL_SERVER_VERIFICATION_LOG)
    name: Verifiction Query Results
    type: file
  # There is little advantage of using
  - path: $(SQL_SERVER_COLUMN_CERTIFICATE).cer
    name: Column Master Key Certificate
    type: file
  - path: $(MSBUILD_LOG_FILE)
    name: MSBuild BInary Log
    type: file
deploy:
  - provider: NuGet
    api_key:
      secure: 0aWfYNiB1lufheXP4lU2Qc1Yewxv7cqea2VMUg1MZOOrppHYSNPpM2Nx4SKSYHCS
    skip_symbols: false
    artifact: /.*\.nupkg/
    on:
      branch: [
        master
      ]
